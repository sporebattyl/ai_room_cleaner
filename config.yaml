# config.yaml
# Defines the configuration for your Home Assistant addon

name: "AI Room Cleaner"
version: "0.1.1" # Synchronized with app.py
slug: "ai_room_cleaner" # Unique slug for your addon
description: "Uses AI to analyze a room feed and create a cleaning to-do list."
arch: # Architectures your addon supports
  - armv7
  - armhf
  - aarch64
  - amd64
  - i386
init: false # Set to true if your addon needs an init system like s6-overlay
startup: "application" # Tells HA how your addon starts. 'application' is common for web services.
boot: "auto" # 'auto' to start with HA, 'manual' otherwise.
ingress: true # Enable Ingress for accessing the web UI
ingress_port: 8099 # The port your Flask app listens on (must match app.py and Dockerfile)
panel_icon: "mdi:robot-vacuum-variant" # Icon for the sidebar
panel_title: "AI Cleaner" # Title in the sidebar if using Ingress

# User-configurable options
options:
  log_level: "info"
  default_camera_entity: "camera.your_room_camera" # Example: user sets their camera
  ai_provider: "openai" # Could be 'openai', 'google_gemini', 'local_ollama', etc.
  openai_api_key: "" # User needs to provide this if using OpenAI
  gemini_api_key: "" # User needs to provide this if using Google Gemini
  # Add other options as needed, e.g., scan_interval_minutes, notification_service

# Schema for the options (defines type, requirement, etc.)
schema:
  log_level: "list(trace|debug|info|notice|warning|error|fatal)"
  default_camera_entity: "str"
  ai_provider: "list(openai|google_gemini|local_ollama)" # Example choices
  openai_api_key: "password?" # 'password' hides it, '?' makes it optional if not always needed
  gemini_api_key: "password?" # Optional if Gemini not selected
  # scan_interval_minutes: "int(1,)" # Example: positive integer
  # notification_service: "str?"

# Network configuration
ports:
  "8099/tcp": 8099 # Expose the port your Flask app runs on (for Ingress)
ports_description:
  "8099/tcp": "Web interface for AI Room Cleaner"

# Environment variables to pass to the container (can map from options)
# These will be accessible in your Python script via os.environ.get()
# The keys here (e.g., LOG_LEVEL) are what your app.py will look for.
# The values (e.g., options.log_level) refer to keys in the 'options' section above.
map:
  - "config" # Makes the entire config available at /data/options.json

# Optional: Define arguments that can be passed during the build phase
# build_from:
#   aarch64: "homeassistant/aarch64-base-python:3.9"
#   amd64: "homeassistant/amd64-base-python:3.9"
#   armv7: "homeassistant/armv7-base-python:3.9"

# Optional: If your addon needs access to Home Assistant API
homeassistant_api: true # Request access to the Home Assistant API (requires SUPERVISOR_TOKEN)

# Optional: If your addon needs access to specific devices (e.g., /dev/ttyUSB0)
# devices:
#   - "/dev/ttyUSB0:/dev/ttyUSB0:rwm"

# Optional: If your addon needs specific privileges
# privileged:
#   - SYS_ADMIN
#   - NET_ADMIN

# Optional: If your addon needs to mount host paths
# map_volumes:
#   "/share:/data/share:ro" # Example: read-only access to HA share folder
```dockerfile
# Dockerfile
# Defines how to build the Docker image for the addon.

# Use an official Home Assistant base image with Python pre-installed.
# Choose a version appropriate for your needs.
# ARG BUILD_FROM="homeassistant/amd64-base-python:3.11"
# FROM ${BUILD_FROM}
# For simplicity, directly specifying one, but ARG BUILD_FROM is better for multi-arch
FROM homeassistant/amd64-base-python:3.11

# Set environment variables (can be overridden by config.yaml or run.sh)
ENV LANG C.UTF-8
ENV PYTHONUNBUFFERED 1 # Ensures print statements and logs appear immediately

# Install system dependencies if needed (e.g., for image processing libraries)
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     ffmpeg \
#  && rm -rf /var/lib/apt/lists/*

# Create a working directory for the addon
WORKDIR /app

# Copy the backend application code into the image
# Assuming your app.py and any requirements.txt are in a 'backend' subdirectory
COPY backend/requirements.txt .
COPY backend/app.py .
# If you have other files/folders in 'backend', copy them too:
# COPY backend/static ./static
# COPY backend/templates ./templates

# Install Python dependencies
# It's good practice to use a requirements.txt file
RUN pip install --no-cache-dir -r requirements.txt

# Expose the port the Flask app will run on (must match config.yaml and app.py)
EXPOSE 8099

# Copy the run script and make it executable
COPY run.sh /
RUN chmod +x /run.sh

# Command to run when the container starts (defined in run.sh)
CMD [ "/run.sh" ]
```sh
#!/usr/bin/with-contenv bashio
# run.sh
# This script is executed when the addon starts.

# Bashio is a Home Assistant utility library for bash scripts.
# It provides functions to read config options, log messages, etc.
# More info: https://developers.home-assistant.io/docs/add-ons/bashio

bashio::log.info "Starting AI Room Cleaner Addon..."

# Read configuration options from /data/options.json (populated by Home Assistant)
CONFIG_PATH=/data/options.json

LOG_LEVEL=$(bashio::config 'log_level' 'info')
CAMERA_ENTITY=$(bashio::config 'default_camera_entity' 'camera.your_room_camera')
AI_PROVIDER=$(bashio::config 'ai_provider' 'openai')
OPENAI_API_KEY=$(bashio::config 'openai_api_key' '')
# Add other config variables as needed

# Export environment variables that your Python app will use
export PYTHONUNBUFFERED=1 # Ensures Python logs are not buffered
export LOG_LEVEL="${LOG_LEVEL}"
export CAMERA_ENTITY_ID="${CAMERA_ENTITY}" # Note: app.py uses CAMERA_ENTITY_ID
export AI_PROVIDER="${AI_PROVIDER}"
export OPENAI_API_KEY="${OPENAI_API_KEY}"
# The SUPERVISOR_TOKEN is automatically available if homeassistant_api: true in config.yaml
export HA_TOKEN="${SUPERVISOR_TOKEN}" # Pass supervisor token to app.py
export HA_URL="http://supervisor/core/api" # Internal URL to HA API, app.py uses this

bashio::log.info "Log Level: ${LOG_LEVEL}"
bashio::log.info "Default Camera Entity: ${CAMERA_ENTITY}"
bashio::log.info "AI Provider: ${AI_PROVIDER}"
if [ -n "${OPENAI_API_KEY}" ]; then
    bashio::log.info "OpenAI API Key is set."
else
    bashio::log.warning "OpenAI API Key is NOT set. AI features might be limited."
fi
if [ -n "${SUPERVISOR_TOKEN}" ]; then
    bashio::log.info "Home Assistant Supervisor token is available."
else
    bashio::log.warning "Home Assistant Supervisor token is NOT available. Cannot fetch camera images."
fi


# Navigate to the app directory (where app.py is)
cd /app || exit 1

bashio::log.info "Starting Python Flask backend server..."

# Execute the Python application
# Use exec to replace the shell process with the Python process
exec python3 ./app.py
# If you were using gunicorn for production:
# exec gunicorn --workers 4 --bind 0.0.0.0:8099 app:app

bashio::log.info "AI Room Cleaner Addon has stopped." # This line might not be reached if exec is used
```yaml
# build.yaml (optional, but good for managing build arguments)

build_from:
  aarch64: "homeassistant/aarch64-base-python:3.11-alpine3.18"
  amd64: "homeassistant/amd64-base-python:3.11-alpine3.18"
  armv7: "homeassistant/armv7-base-python:3.11-alpine3.18"
  armhf: "homeassistant/armhf-base-python:3.11-alpine3.18" # Usually same as armv7
  i386: "homeassistant/i386-base-python:3.11-alpine3.18"
args:
  TEMPIO_VERSION: "2021.09.0" # Example build argument
```python
# backend/requirements.txt
# List your Python dependencies here, one per line.

Flask>=2.0
requests>=2.25 # For making HTTP requests (e.g., to AI APIs or HA API)
# openai>=1.0 # If using the OpenAI Python library
# Pillow>=9.0 # For image manipulation, if needed
# numpy # If doing any numerical processing with images

# For now, just Flask is enough for the basic backend.
# Add more as you develop features.
